{"version":3,"sources":["../../src/controllers/passportLocalController.js"],"names":["localStrategy","passportLocal","Strategy","initPassportLocal","passport","use","usernameField","passwordField","passReqToCallback","req","email","password","done","loginService","findUserByEmail","user","flash","comparePasswordUser","match","err","serializeUser","id","deserializeUser","findUserById","then","catch","error","module","exports"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,gBAAgBC,wBAAcC,QAAlC;;AAEA,IAAIC,oBAAoB,SAApBA,iBAAoB,GAAM;AAC1BC,uBAASC,GAAT,CAAa,IAAIL,aAAJ,CAAkB;AAC3BM,uBAAe,OADY;AAE3BC,uBAAe,UAFY;AAG3BC,2BAAmB;AAHQ,KAAlB;AAAA,2EAKT,iBAAOC,GAAP,EAAYC,KAAZ,EAAmBC,QAAnB,EAA6BC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEyBC,uBAAaC,eAAb,CAA6BJ,KAA7B,CAFzB;;AAAA;AAEYK,gCAFZ;;AAAA,gCAGaA,IAHb;AAAA;AAAA;AAAA;;AAAA,6DAImBH,KAAK,IAAL,EAAW,KAAX,EAAkBH,IAAIO,KAAJ,CAAU,QAAV,yBAAwCN,KAAxC,sBAAlB,CAJnB;;AAAA;AAAA,iCAMYK,IANZ;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAQ8BF,uBAAaI,mBAAb,CAAiCF,IAAjC,EAAuCJ,QAAvC,CAR9B;;AAAA;AAQgBO,iCARhB;;AAAA,kCASgBA,UAAU,IAT1B;AAAA;AAAA;AAAA;;AAAA,6DAUuBN,KAAK,IAAL,EAAWG,IAAX,EAAiB,IAAjB,CAVvB;;AAAA;AAAA,6DAauBH,KAAK,IAAL,EAAW,KAAX,EAAkBH,IAAIO,KAAJ,CAAU,QAAV,EAAoBE,KAApB,CAAlB,CAbvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6DAiBeN,KAAK,IAAL,EAAW,KAAX,EAAkBO,GAAlB,CAjBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALS;;AAAA;AAAA;AAAA;AAAA,QAAb;AA2BH,CA5BD;;AA8BAf,mBAASgB,aAAT,CAAuB,UAACL,IAAD,EAAOH,IAAP,EAAgB;AACnCA,SAAK,IAAL,EAAWG,KAAKM,EAAhB;AACH,CAFD;;AAIAjB,mBAASkB,eAAT,CAAyB,UAACD,EAAD,EAAKT,IAAL,EAAc;AACnCC,2BAAaU,YAAb,CAA0BF,EAA1B,EAA8BG,IAA9B,CAAmC,UAACT,IAAD,EAAU;AACzC,eAAOH,KAAK,IAAL,EAAWG,IAAX,CAAP;AACH,KAFD,EAEGU,KAFH,CAES,iBAAS;AACd,eAAOb,KAAKc,KAAL,EAAY,IAAZ,CAAP;AACH,KAJD;AAKH,CAND;;AAQAC,OAAOC,OAAP,GAAiBzB,iBAAjB","file":"passportLocalController.js","sourcesContent":["import { emit } from \"nodemon\";\r\nimport passport from \"passport\";\r\nimport passportLocal from \"passport-local\";\r\nimport loginService from \"../services/loginService\"\r\n\r\nlet localStrategy = passportLocal.Strategy;\r\n\r\nlet initPassportLocal = () => {\r\n    passport.use(new localStrategy({\r\n        usernameField: 'email',\r\n        passwordField: 'password',\r\n        passReqToCallback: true\r\n    },\r\n        async (req, email, password, done) => {\r\n            try {\r\n                let user = await loginService.findUserByEmail(email);\r\n                if (!user) {\r\n                    return done(null, false, req.flash(\"errors\", `This user email \"${email}\" doesn't exist`))\r\n                }\r\n                if (user) {\r\n                    //   compare password\r\n                    let match = await loginService.comparePasswordUser(user, password)\r\n                    if (match === true) {\r\n                        return done(null, user, null)\r\n                    }\r\n                    else {\r\n                        return done(null, false, req.flash(\"errors\", match))\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                return done(null, false, err)\r\n            }\r\n        }\r\n\r\n    ))\r\n}\r\n\r\npassport.serializeUser((user, done) => {\r\n    done(null, user.id);\r\n})\r\n\r\npassport.deserializeUser((id, done) => {\r\n    loginService.findUserById(id).then((user) => {\r\n        return done(null, user)\r\n    }).catch(error => {\r\n        return done(error, null)\r\n    })\r\n})\r\n\r\nmodule.exports = initPassportLocal;"]}