{"version":3,"sources":["../../src/services/loginService.js"],"names":["findUserByEmail","email","Promise","resolve","reject","connection","query","error","rows","user","e","comparePasswordUser","password","bcrypt","compare","isMatch","findUserById","id","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC7B,WAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,YAAI;AACAC,gCAAWC,KAAX,CAAiB,mCAAjB,EAAsDL,KAAtD,EAA6D,UAAUM,KAAV,EAAiBC,IAAjB,EAAuB;AAChF,oBAAID,KAAJ,EAAW;AACPH,2BAAOG,KAAP;AACH;AACD,oBAAIE,OAAOD,KAAK,CAAL,CAAX;AACAL,wBAAQM,IAAR;AACH,aAND;AAOH,SARD,CAQE,OAAOC,CAAP,EAAU;AACRN,mBAAOM,CAAP;AACH;AACJ,KAZM,CAAP;AAaH,CAdD;;AAgBA,IAAIC,sBAAsB,SAAtBA,mBAAsB,CAACF,IAAD,EAAOG,QAAP,EAAoB;AAC1C,WAAO,IAAIV,OAAJ;AAAA,2EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAESS,mBAAOC,OAAP,CAAeF,QAAf,EAAyBH,KAAKG,QAA9B,CAFT;;AAAA;AAEPG,mCAFO;;AAGX,gCAAIA,OAAJ,EAAaZ,QAAQ,IAAR;AACbA,oCAAQ,0CAAR,EAJW,CAIyC;AAJzC;AAAA;;AAAA;AAAA;AAAA;;AAMXC;;AANW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AASH,CAVD;;AAYA,IAAIY,eAAe,SAAfA,YAAe,CAACC,EAAD,EAAQ;AACvB,WAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI;AACAC,gCAAWC,KAAX,CAAiB,kCAAjB,EAAqDW,EAArD,EAAyD,UAAUV,KAAV,EAAiBC,IAAjB,EAAuB;AAC5E,oBAAID,KAAJ,EAAWH,OAAOG,KAAP;AACX,oBAAIE,OAAOD,KAAK,CAAL,CAAX;AACAL,wBAAQM,IAAR;AACH,aAJD;AAKH,SAND,CAME,OAAOC,CAAP,EAAU;AACRN,mBAAOM,CAAP;AACH;AACJ,KAVM,CAAP;AAWH,CAZD;;AAeAQ,OAAOC,OAAP,GAAiB;AACbR,yBAAqBA,mBADR;AAEbX,qBAAiBA,eAFJ;AAGbgB,kBAAcA;AAHD,CAAjB","file":"loginService.js","sourcesContent":["import connection from \"../configs/connectDB\"\r\nimport bcrypt from \"bcryptjs\"\r\nimport passport from \"passport\"\r\n\r\nlet findUserByEmail = (email) => {\r\n    return new Promise(((resolve, reject) => {\r\n        try {\r\n            connection.query(\"SELECT * from users where email=?\", email, function (error, rows) {\r\n                if (error) {\r\n                    reject(error);\r\n                }\r\n                let user = rows[0];\r\n                resolve(user);\r\n            })\r\n        } catch (e) {\r\n            reject(e)\r\n        }\r\n    }))\r\n}\r\n\r\nlet comparePasswordUser = (user, password) => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            let isMatch = await bcrypt.compare(password, user.password)\r\n            if (isMatch) resolve(true);\r\n            resolve(\"The password you've entered is incorrect\");//changes======================================\r\n        } catch (e) {\r\n            reject(e)\r\n        }\r\n    })\r\n}\r\n\r\nlet findUserById = (id) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            connection.query(\"SELECT * from users where id = ?\", id, function (error, rows) {\r\n                if (error) reject(error)\r\n                let user = rows[0];\r\n                resolve(user)\r\n            })\r\n        } catch (e) {\r\n            reject(e)\r\n        }\r\n    })\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    comparePasswordUser: comparePasswordUser,\r\n    findUserByEmail: findUserByEmail,\r\n    findUserById: findUserById\r\n}"]}