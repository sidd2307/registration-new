{"version":3,"sources":["../../src/services/registerService.js"],"names":["createNewUser","user","Promise","resolve","reject","checkEmailUser","email","check","salt","bcryptjs","genSaltSync","data","fullname","password","hashSync","connection","query","error","rows","length","e","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAIA,gBAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC1B,WAAO,IAAIC,OAAJ;AAAA,2EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAGOC,eAAeJ,KAAKK,KAApB,CAHP;;AAAA;AAGPC,iCAHO;;AAIX,gCAAGA,KAAH,EAAS;AACLH,yDAAsBH,KAAKK,KAA3B;AACH,6BAFD,MAGI;AACA;AACIE,oCAFJ,GAEWC,mBAASC,WAAT,CAAqB,EAArB,CAFX;AAGIC,oCAHJ,GAGW;AACPC,8CAAUX,KAAKW,QADR;AAEPN,2CAAOL,KAAKK,KAFL;AAGPO,8CAAUJ,mBAASK,QAAT,CAAkBb,KAAKY,QAAvB,EAAiCL,IAAjC;AAHH,iCAHX;;;AASAO,oDAAWC,KAAX,CAAiB,0BAAjB,EAA6CL,IAA7C,EAAmD,UAASM,KAAT,EAAgBC,IAAhB,EAAsB;AACrE,wCAAGD,KAAH,EAAS;AACLb,+CAAOa,KAAP;AACH;AACDd,4CAAQ,kCAAR;AACH,iCALD;AAMH;AAtBU;AAAA;;AAAA;AAAA;AAAA;;AAwBXC;;AAxBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AA2BH,CA5BD;;AA8BA,IAAIC,iBAAiB,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAC5B,WAAO,IAAIJ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI;AACAW,gCAAWC,KAAX,CAAiB,qCAAjB,EAAwDV,KAAxD,EAA+D,UAASW,KAAT,EAAgBC,IAAhB,EAAqB;AAChF,oBAAGD,KAAH,EAAS;AACLb,2BAAOa,KAAP;AACH;AACD,oBAAGC,KAAKC,MAAL,GAAc,CAAjB,EAAmB;AACfhB,4BAAQ,IAAR;AACH,iBAFD,MAGK;AACDA,4BAAQ,KAAR;AACH;AACJ,aAVD;AAWH,SAZD,CAYE,OAAOiB,CAAP,EAAU;AACRhB,mBAAOgB,CAAP;AACH;AACJ,KAhBM,CAAP;AAiBH,CAlBD;;AAoBAC,OAAOC,OAAP,GAAiB;AACbtB,mBAAeA;AADF,CAAjB","file":"registerService.js","sourcesContent":["import connection from \"../configs/connectDB\"\r\nimport bcryptjs from \"bcryptjs\"\r\nimport { reject } from \"async\";\r\nimport e from \"connect-flash\";\r\n\r\nlet createNewUser = (user) => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            // check email is exist in db or not\r\n            let check = await checkEmailUser(user.email);\r\n            if(check){\r\n                reject(`This email \"${user.email}\" already exists. Please choose another email!`)\r\n            }\r\n            else{\r\n                // hash the users password\r\n                let salt = bcryptjs.genSaltSync(10);\r\n                let data = {\r\n                    fullname: user.fullname,\r\n                    email: user.email,\r\n                    password: bcryptjs.hashSync(user.password, salt)\r\n                }\r\n\r\n                connection.query(\"INSERT INTO users set ? \", data, function(error, rows) {\r\n                    if(error){\r\n                        reject(error)\r\n                    }\r\n                    resolve(\"Created a new user successfully!\")\r\n                })\r\n            }\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    })\r\n}\r\n\r\nlet checkEmailUser = (email) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            connection.query(\"SELECT * from users where email = ?\", email, function(error, rows){\r\n                if(error){\r\n                    reject(error);\r\n                }\r\n                if(rows.length > 0){\r\n                    resolve(true)\r\n                }\r\n                else {\r\n                    resolve(false)\r\n                }\r\n            })\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    createNewUser: createNewUser\r\n}"]}